
# Categories
#   - viewer
#   - generator
#   - parser
#   - editor
#   - transformer
#   - validator
#   - converter
#   - applications
#   - storage

# Interfaces
#   - cli
#   - gui
#   - both

# Types
#   - app
#   - lib
#   - both

# Don't forget to add software alphabetically!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

- name: 3D City DB
  webpage: http://www.3dcitydb.org
  description: Free geo-database to store, represent, and manage virtual 3D city models on top of a standard spatial relational database (PostGIS and Oracle)
  foss: true
  category: 
    - storage
    - transformer
  interface: gui
  type: app

- name: 3dfier
  webpage: https://github.com/tudelft3d/3dfier
  description: Takes 2D GIS datasets and "3dfies" them by lifting each polygon to its height (obtained with LiDAR). Outputs CityJSON, CityGML, and OBJ
  foss: true
  category: 
    - generator
  interface: cli
  type: lib

- name: azul
  webpage: https://itunes.apple.com/nl/app/azul/id1173239678?mt=12
  description: A native and fast CityJSON viewer for macOS
  foss: true
  category: 
    - viewer
  interface: gui
  type: app

- name: Blender plugin
  webpage: https://github.com/cityjson/Blender-CityJSON-Plugin
  description: Plugin to open/import directly CityJSON models in Blender, attributes and semantics are kept.
  foss: true
  category: 
    - viewer
    - transformer
    - applications
    - editor
  interface: gui
  type: app

- name: citygml4j
  webpage: https://github.com/citygml4j
  description: Open source Java class library and API 
  foss: true
  category: 
    - parser
  interface: cli
  type: lib

- name: citygml-tools
  webpage: https://github.com/citygml4j/citygml-tools
  description: CLI created with citygml4j, it allows us to convert CityJSON <-> CityGML in one-click. 
  foss: true
  category: 
    - transformer
    - converter
  interface: cli
  type: both

- name: cjio
  webpage: https://github.com/cityjson/cjio
  description: Python CLI to process and manipulate CityJSON files. Used as the 'official' validator for CityJSON files.
  foss: true
  category: 
    - validator
    - converter
    - transformer
    - parser
  interface: cli
  type: both

- name: FME
  webpage: https://github.com/safesoftware/fme-CityJSON
  description: A (beta) reader/writer for [FME](https://www.safe.com/fme/). For the latest version, download and compile the open-source code from GitHub. The latest [FME beta](https://www.safe.com/support/downloads/#beta) has the latest code too.
  foss: false
  category: 
    - viewer
    - generator
    - converter
  interface: gui
  type: app

- name: Measur3D
  webpage: https://ganys.github.io/Measur3D/
  description: A light and compact CityJSON management tool. This tool is built as a high-level MERN application. It therefore allows developing with a single language in both server and client side.
  foss: true
  category: 
    - storage
    - viewer
  interface: gui
  type: app

- name: ninja
  webpage: https://ninja.cityjson.org/
  description: A viewer with support for holes and the ability to edit, all within the ease of your browser. The [repository](https://github.com/cityjson/ninja) has the latest code too.
  foss: true
  category: 
    - viewer
    - editor
  interface: gui
  type: app

- name: QGIS plugin
  webpage: https://github.com/tudelft3d/cityjson-qgis-plugin
  description: A plugin that supports the loading of CityJSON datasets in QGIS3; these can be queried like any other layers in QGIS.
  foss: true
  category: 
    - viewer
  interface: gui
  type: app

- name: Schema Store
  webpage: https://www.schemastore.org/json/
  description: The JSON API contains a list of JSON Schema files for known JSON file formats. Each schema file can be used in tooling such as command line validators, editor auto-completion etc.
  foss: true
  category: 
    - parser
  interface: cli
  type: lib
  
- name: val3dity
  webpage: http://github.com/tudelft3d/val3dity/
  description: Validation of 3D GML primitives according to the international standard ISO19107
  foss: true
  category: 
    - validator
  interface: both
  type: both



